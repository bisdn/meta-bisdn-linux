#!/usr/bin/env bash
# Copyright (C) 2019 Rubens Figueiredo of BISDN GmbH

# Bash script intended to gather important information regarding Switch status
# and logs for support purposes

set -o pipefail -o noclobber -o nounset -o allexport

if [[ $EUID -ne 0 ]]; then
   echo -e "Please run this program as root\nExiting" 1>&2
   exit 1
fi

function print_help() {
  echo -e "basebox support script\nBackup internal switch status, and creates a tarball for support"
  echo -e "execution:
    -h, --help : print this message"
}

# Handling command line arguments
if [ ! $# -eq 0 ]; then
  _cli_arguments=$1
  case $_cli_arguments in
    -h | --help)
      print_help
      exit 0
      ;;
    *)
      echo "Unknown parameter passed: $1"
      print_help
      exit 1
      ;;
  esac
  shift
fi

separator=$(printf '#%.0s' {1..80})

function title() {
  local title=$1
  echo "$separator"
  echo "# $title"
  echo "$separator"
}

function exe_in_path() {
  local executable_name=$1
  which "$executable_name" > /dev/null
}

function report_result() {
  local exit_status=$1
  if [ "$exit_status" -eq 0 ]; then
    echo "Done."
  else
    echo >&2 "Failed. Aborting."
    # Kill this process
    kill $$
  fi
}

function log_cmd_output() {
  local cmd=("$@")
  # Save stdout fd 1 in fd 5 and redirect stdout to file
  exec 5>&1 >> "$OUTPUT_FILE"
  echo "${cmd[@]}"
  "${cmd[@]}"
  echo "$separator"
  # Restore saved stdout.
  exec 1>&5
}

TMPDIR=$(mktemp -d)

echo "Retrieving package data"
opkg list_installed >> "${TMPDIR}"/package_data
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Retrieving logs"
journalctl -b > "${TMPDIR}"/journal.log
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Retrieving network state"
# echo "global IP: $(curl -sL ip.bisdn.de || echo 'not reachable')" > ${TMPDIR}/network_state
{
  echo "sysctl net.ipv4.ip_forward"
  echo "##########################"
  sysctl net.ipv4.ip_forward
  echo ""
  echo "sysctl net.ipv6.conf.all.forwarding"
  echo "###################################"
  sysctl net.ipv6.conf.all.forwarding
  echo ""
  echo "ip a"
  echo "###"
  ip a
  echo ""
  echo "ip route list table all"
  echo "###"
  ip route list table all
  echo ""
  echo "ip neigh"
  echo "###"
  ip neigh
  echo ""
  echo "bridge vlan"
  echo "###########"
  bridge -c vlan
  echo ""
  echo "bridge vlan database"
  echo "##########"
  bridge vlan database
  echo ""
  echo "bridge fdb"
  echo "##########"
  bridge fdb
  echo ""
  echo "bridge mdb"
  echo "##########"
  bridge mdb
} >> "${TMPDIR}"/network_state
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Retrieving client tools information"
{
  echo "Group table"
  /usr/sbin/client_grouptable_dump
  echo ""
  echo "Flow table"
  /usr/sbin/client_flowtable_dump
  echo ""
  echo "Port table"
  /usr/sbin/client_port_table_dump
  echo ""
  echo "Client Ports"
  /usr/sbin/client_drivshell ports
  echo ""
  echo "STG State"
  /usr/sbin/client_drivshell stg show
  echo ""
  echo "Trunk Group State"
  /usr/sbin/client_drivshell trunk show
} >> "${TMPDIR}"/client_tools
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Retrieving basic techsupport from SDK"
/usr/sbin/client_drivshell techsupport basic >> "${TMPDIR}"/tech_support

echo "Retrieving support bundle from FRR"
/usr/lib/frr/generate_support_bundle.py
cp /var/log/frr/*_support_bundle.log "${TMPDIR}"

echo "onlpdump -S"
{
  echo "onlpdump -S"
  onlpdump -S
} >> "${TMPDIR}"/port_list
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Create tarball"
FILE="/home/basebox/support-data_$(date "+%Y%m%d-%H%M%S")-SWITCH.tar.xz"
( tar czf "${FILE}" "${TMPDIR}" /etc/systemd/network /etc/frr 2>&1) > /dev/null
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Tarball created: ${FILE}"
echo "Please send the tarball to support@basebox.freshdesk.com"

rm -rf "${TMPDIR}"
