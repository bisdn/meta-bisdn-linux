#!/usr/bin/env bash
# Copyright (C) 2019 Rubens Figueiredo of BISDN GmbH

# Bash script intended to gather important information regarding Switch status
# and logs for support purposes

set -o pipefail -o noclobber -o nounset -o allexport

if [[ $EUID -ne 0 ]]; then
   echo -e "Please run this program as root\nExiting" 1>&2
   exit 1
fi

function print_help() {
  echo -e "basebox support script\nBackup internal switch status, and creates a tarball for support"
  echo -e "execution:
    -h, --help : print this message"
}

# Handling command line arguments
if [ ! $# -eq 0 ]; then
  _cli_arguments=$1
  case $_cli_arguments in
    -h | --help)
      print_help
      exit 0
      ;;
    *)
      echo "Unknown parameter passed: $1"
      print_help
      exit 1
      ;;
  esac
  shift
fi

separator=$(printf '#%.0s' {1..80})

function title() {
  local title=$1
  echo "$separator"
  echo "# $title"
  echo "$separator"
}

function exe_in_path() {
  local executable_name=$1
  which "$executable_name" > /dev/null
}

function report_result() {
  local exit_status=$1
  if [ "$exit_status" -eq 0 ]; then
    echo "Done."
  else
    echo >&2 "Failed. Aborting."
    # Kill this process
    kill $$
  fi
}

function log_cmd_output() {
  local cmd=("$@")
  # Skip commands that are not present.
  if ! exe_in_path "${cmd[0]}"; then
    echo "${cmd[0]} not found, skipping."
    return 0
  fi
  # Save stdout fd 1 in fd 5 and redirect stdout to file
  exec 5>&1 >> "$OUTPUT_FILE"
  if [ -n "${LST:-""}" ]; then
    # Write log section title into file, then reset variable.
    echo "$LST"
    LST=""
  else
    # Log the command and its arguments.
    echo "${cmd[@]}"
  fi
  "${cmd[@]}"
  echo "$separator"
  # Restore saved stdout.
  exec 1>&5
}

function copy_dir() {
  local cdir=$1
  if [ -e "$cdir" ]; then
    title "Copying $cdir"
    mkdir -p "$TMPDIR/$(dirname "$cdir")"
    cp -a "$cdir" "$TMPDIR/$cdir"
  fi
}

TMPDIR=$(mktemp -d)

function get_package_data() {
  title "Retrieving package data"
  OUTPUT_FILE="$TMPDIR/package_data"
  if exe_in_path opkg; then
      log_cmd_output opkg list_installed
  elif exe_in_path dpkg; then
      log_cmd_output dpkg -l
  fi
}

get_package_data

function get_logs() {
  title "Retrieving all logs since last reboot"
  OUTPUT_FILE="$TMPDIR/journal.log"
  log_cmd_output journalctl -b
}

get_logs

function get_network_state() {
  title "Retrieving network state"

  OUTPUT_FILE="$TMPDIR/network_state"
  log_cmd_output sysctl net.ipv4.ip_forward
  log_cmd_output sysctl net.ipv4.ip_forward
  log_cmd_output sysctl net.ipv6.conf.all.forwarding
  log_cmd_output ip a
  log_cmd_output ip route list table all
  log_cmd_output ip neigh
  log_cmd_output bridge -c vlan
  log_cmd_output bridge vlan database
  log_cmd_output bridge fdb
  log_cmd_output bridge mdb
}

get_network_state

function get_client_tools_info() {
  title "Retrieving client tools information"

  OUTPUT_FILE="$TMPDIR/client_tools"
  LST="Group table" log_cmd_output /usr/sbin/client_grouptable_dump
  LST="Flow table" log_cmd_output /usr/sbin/client_flowtable_dump
  LST="Port table" log_cmd_output /usr/sbin/client_port_table_dump
  LST="Client Ports" log_cmd_output /usr/sbin/client_drivshell ports
  LST="STG State" log_cmd_output /usr/sbin/client_drivshell stg show
  LST="Trunk Group State" log_cmd_output /usr/sbin/client_drivshell trunk show
}

get_client_tools_info

echo "Retrieving basic techsupport from SDK"
/usr/sbin/client_drivshell techsupport basic >> "${TMPDIR}"/tech_support

echo "Retrieving support bundle from FRR"
/usr/lib/frr/generate_support_bundle.py
cp /var/log/frr/*_support_bundle.log "${TMPDIR}"

echo "onlpdump -S"
{
  echo "onlpdump -S"
  onlpdump -S
} >> "${TMPDIR}"/port_list
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

copy_dir /etc/systemd/network
copy_dir /etc/frr

echo "Create tarball"
FILE="/home/basebox/support-data_$(date "+%Y%m%d-%H%M%S")-SWITCH.tar.xz"
( tar czf "${FILE}" -C "${TMPDIR}" . 2>&1) > /dev/null
[ "$?" == "0" ] && echo "ok" || ( echo "failed" && exit 1 )

echo "Tarball created: ${FILE}"
echo "Please send the tarball to support@basebox.freshdesk.com"

rm -rf "${TMPDIR}"
