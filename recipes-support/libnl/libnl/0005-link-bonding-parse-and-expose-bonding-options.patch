From 638761201439eaa8fcaa44fad37744fd4528391a Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Tue, 6 Oct 2020 10:00:37 +0200
Subject: [PATCH 05/10] link/bonding: parse and expose bonding options

Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 include/netlink/route/link/bonding.h |   8 +
 lib/route/link/bonding.c             | 223 +++++++++++++++++++++++++--
 libnl-route-3.sym                    |   6 +
 3 files changed, 226 insertions(+), 11 deletions(-)

diff --git a/include/netlink/route/link/bonding.h b/include/netlink/route/link/bonding.h
index e12d8a524658..dbd33222b26b 100644
--- a/include/netlink/route/link/bonding.h
+++ b/include/netlink/route/link/bonding.h
@@ -26,11 +26,19 @@ extern int	rtnl_link_bond_release_ifindex(struct nl_sock *, int);
 extern int	rtnl_link_bond_release(struct nl_sock *, struct rtnl_link *);
 
 extern void	rtnl_link_bond_set_mode(struct rtnl_link *link, uint8_t mode);
+extern int	rtnl_link_bond_get_mode(struct rtnl_link *link, uint8_t *mode);
+
 extern void	rtnl_link_bond_set_activeslave(struct rtnl_link *link, int active_slave);
+extern int	rtnl_link_bond_get_activeslave(struct rtnl_link *link, int *active_slave);
+
 extern void	rtnl_link_bond_set_hashing_type (struct rtnl_link *link, uint8_t type);
+extern int	rtnl_link_bond_get_hashing_type(struct rtnl_link *, uint8_t *type);
 extern void	rtnl_link_bond_set_miimon (struct rtnl_link *link, uint32_t miimon);
 extern void	rtnl_link_bond_set_min_links (struct rtnl_link *link, uint32_t min_links);
 
+extern void	rtnl_link_bond_set_primary(struct rtnl_link *, int primary);
+extern int	rtnl_link_bond_get_primary(struct rtnl_link *, int *primary);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/route/link/bonding.c b/lib/route/link/bonding.c
index 63fd47499e25..2308e4cc3915 100644
--- a/lib/route/link/bonding.c
+++ b/lib/route/link/bonding.c
@@ -27,14 +27,16 @@
 #define BOND_HAS_HASHING_TYPE	(1 << 2)
 #define BOND_HAS_MIIMON		(1 << 3)
 #define BOND_HAS_MIN_LINKS	(1 << 4)
+#define BOND_HAS_PRIMARY	(1 << 5)
 
 struct bond_info {
 	uint8_t bn_mode;
 	uint8_t hashing_type;
 	uint32_t ifindex;
-	uint32_t bn_mask;
 	uint32_t miimon;
 	uint32_t min_links;
+	uint32_t primary;
+	uint32_t ce_mask; /* HACK to support attr macros */
 };
 
 static int bond_info_alloc(struct rtnl_link *link)
@@ -67,21 +69,24 @@ static int bond_put_attrs(struct nl_msg *msg, struct rtnl_link *link)
 	data = nla_nest_start(msg, IFLA_INFO_DATA);
 	if (!data)
 		return -NLE_MSGSIZE;
-	if (bn->bn_mask & BOND_HAS_MODE)
+	if (bn->ce_mask & BOND_HAS_MODE)
 		NLA_PUT_U8(msg, IFLA_BOND_MODE, bn->bn_mode);
 
-	if (bn->bn_mask & BOND_HAS_ACTIVE_SLAVE)
+	if (bn->ce_mask & BOND_HAS_ACTIVE_SLAVE)
 		NLA_PUT_U32(msg, IFLA_BOND_ACTIVE_SLAVE, bn->ifindex);
 
-	if (bn->bn_mask & BOND_HAS_HASHING_TYPE)
+	if (bn->ce_mask & BOND_HAS_HASHING_TYPE)
 		NLA_PUT_U8(msg, IFLA_BOND_XMIT_HASH_POLICY, bn->hashing_type);
 
-	if (bn->bn_mask & BOND_HAS_MIIMON)
+	if (bn->ce_mask & BOND_HAS_MIIMON)
 		NLA_PUT_U32(msg, IFLA_BOND_MIIMON, bn->miimon);
 
-	if (bn->bn_mask & BOND_HAS_MIN_LINKS)
+	if (bn->ce_mask & BOND_HAS_MIN_LINKS)
 		NLA_PUT_U32(msg, IFLA_BOND_MIN_LINKS, bn->min_links);
 
+	if (bn->ce_mask & BOND_HAS_PRIMARY)
+		NLA_PUT_U32(msg, IFLA_BOND_PRIMARY, bn->primary);
+
 	nla_nest_end(msg, data);
 	return 0;
 
@@ -90,11 +95,101 @@ nla_put_failure:
 	return -NLE_MSGSIZE;
 }
 
+static struct nla_policy bonding_nl_policy[IFLA_BOND_MAX+1] = {
+	[IFLA_BOND_MODE]             = { .type = NLA_U8 },
+	[IFLA_BOND_ACTIVE_SLAVE]     = { .type = NLA_U32 },
+	[IFLA_BOND_PRIMARY]          = { .type = NLA_U32 },
+	[IFLA_BOND_XMIT_HASH_POLICY] = { .type = NLA_U8 },
+};
+
+static int bond_parse(struct rtnl_link *link, struct nlattr *data,
+			struct nlattr *xstats)
+{
+	struct nlattr *tb[IFLA_BOND_MAX+1];
+	struct bond_info *bn;
+	int err;
+
+	NL_DBG(3, "Parsing bonding info\n");
+
+	if ((err = nla_parse_nested(tb, IFLA_BOND_MAX, data, bonding_nl_policy)) < 0)
+		goto errout;
+
+	if ((err = bond_info_alloc(link)) < 0)
+		goto errout;
+
+	bn = link->l_info;
+
+	if (tb[IFLA_BOND_MODE]) {
+		bn->bn_mode = nla_get_u8(tb[IFLA_BOND_MODE]);
+		bn->ce_mask |= BOND_HAS_MODE;
+	}
+
+	if (tb[IFLA_BOND_ACTIVE_SLAVE]) {
+		bn->ifindex = nla_get_u32(tb[IFLA_BOND_ACTIVE_SLAVE]);
+		bn->ce_mask |= BOND_HAS_ACTIVE_SLAVE;
+	}
+
+	if (tb[IFLA_BOND_PRIMARY]) {
+		bn->primary = nla_get_u32(tb[IFLA_BOND_PRIMARY]);
+		bn->ce_mask |= BOND_HAS_PRIMARY;
+	}
+
+	if (tb[IFLA_BOND_XMIT_HASH_POLICY]) {
+		bn->hashing_type = nla_get_u32(tb[IFLA_BOND_XMIT_HASH_POLICY]);
+		bn->ce_mask |= BOND_HAS_HASHING_TYPE;
+	}
+
+	err = 0;
+errout:
+	return err;
+}
+
+static int bond_clone(struct rtnl_link *dst, struct rtnl_link *src)
+{
+	struct bond_info *vdst, *vsrc = src->l_info;
+	int err;
+
+	dst->l_info = NULL;
+	if ((err = rtnl_link_set_type(dst, "bond")) < 0)
+		return err;
+	vdst = dst->l_info;
+
+	if (!vdst || !vsrc)
+		return -NLE_NOMEM;
+
+	memcpy(vdst, vsrc, sizeof(struct bond_info));
+
+	return 0;
+}
+
+static int bond_compare(struct rtnl_link *link_a, struct rtnl_link *link_b,
+			 int flags)
+{
+	struct bond_info *a = link_a->l_info;
+	struct bond_info *b = link_b->l_info;
+	int diff = 0;
+	uint32_t attrs = flags & LOOSE_COMPARISON ? b->ce_mask : ~0;
+
+#define BOND_DIFF(ATTR, EXPR) ATTR_DIFF(attrs, BOND_HAS_##ATTR, a, b, EXPR)
+#define _DIFF(ATTR, EXPR) ATTR_DIFF(attrs, ATTR, a, b, EXPR)
+
+	diff |= _DIFF(BOND_HAS_MODE, a->bn_mode != b->bn_mode);
+	diff |= _DIFF(BOND_HAS_ACTIVE_SLAVE, a->ifindex != b->ifindex);
+	diff |= _DIFF(BOND_HAS_PRIMARY, a->primary != b->primary);
+	diff |= _DIFF(BOND_HAS_HASHING_TYPE, a->hashing_type != b->hashing_type);
+#undef _DIFF
+
+	return diff;
+}
+
 static struct rtnl_link_info_ops bonding_info_ops = {
 	.io_name		= "bond",
 	.io_alloc		= bond_info_alloc,
+	.io_parse		= bond_parse,
+	.io_clone		= bond_clone,
 	.io_put_attrs		= bond_put_attrs,
 	.io_free		= bond_info_free,
+	.io_compare		= bond_compare,
 };
 
 #define IS_BOND_INFO_ASSERT(link)                                                    \
@@ -119,7 +214,29 @@ void rtnl_link_bond_set_activeslave(struct rtnl_link *link, int active_slave)
 
 	bn->ifindex = active_slave;
 
-	bn->bn_mask |= BOND_HAS_ACTIVE_SLAVE;
+	bn->ce_mask |= BOND_HAS_ACTIVE_SLAVE;
+}
+
+/**
+ * Get active slave for bond
+ * @arg link		Link object of type bond
+ * @arg active          ifindex of active slave
+ *
+ * @return 0 on success or a negative error code
+ */
+int rtnl_link_bond_get_activeslave(struct rtnl_link *link, int *active_slave)
+{
+	struct bond_info *info = link->l_info;
+
+	IS_BOND_INFO_ASSERT(link);
+
+	if (!(info->ce_mask & BOND_HAS_ACTIVE_SLAVE))
+		return -NLE_NOATTR;
+
+	if (active_slave)
+		*active_slave = info->ifindex;
+
+	return 0;
 }
 
 /**
@@ -137,7 +254,68 @@ void rtnl_link_bond_set_mode(struct rtnl_link *link, uint8_t mode)
 
 	bn->bn_mode = mode;
 
-	bn->bn_mask |= BOND_HAS_MODE;
+	bn->ce_mask |= BOND_HAS_MODE;
+}
+
+/**
+ * Get bond mode
+ * @arg link		Link object of type bond
+ * @arg mode		bond mode
+ *
+ * @return 0 on success or a negative error code
+ */
+int rtnl_link_bond_get_mode(struct rtnl_link *link, uint8_t *mode)
+{
+	struct bond_info *info = link->l_info;
+
+	IS_BOND_INFO_ASSERT(link);
+
+	if (!(info->ce_mask & BOND_HAS_MODE))
+		return -NLE_NOATTR;
+
+	if (mode)
+		*mode = info->bn_mode;
+
+	return 0;
+}
+
+/**
+ * Set bond primary link
+ * @arg link		Link object of type bond
+ * @arg primary		ifindex of primary slave to set
+ *
+ * @return void
+ */
+void rtnl_link_bond_set_primary(struct rtnl_link *link, int primary)
+{
+	struct bond_info *info = link->l_info;
+
+	IS_BOND_INFO_ASSERT(link);
+
+	info->primary = primary;
+	info->ce_mask |= BOND_HAS_PRIMARY;
+}
+
+/**
+ * Get bond primary link
+ * @arg link		Link object of type bond
+ * @arg primary		ifindex of primary slave
+ *
+ * @return 0 on success or a negative error code
+ */
+int rtnl_link_bond_get_primary(struct rtnl_link *link, int *primary)
+{
+	struct bond_info *info = link->l_info;
+
+	IS_BOND_INFO_ASSERT(link);
+
+	if (!(info->ce_mask & BOND_HAS_PRIMARY))
+		return -NLE_NOATTR;
+
+	if (primary)
+		*primary = info->primary;
+
+	return 0;
 }
 
 /**
@@ -155,7 +333,30 @@ void rtnl_link_bond_set_hashing_type (struct rtnl_link *link, uint8_t type)
 
 	bn->hashing_type = type;
 
-	bn->bn_mask |= BOND_HAS_HASHING_TYPE;
+	bn->ce_mask |= BOND_HAS_HASHING_TYPE;
+}
+
+/**
+ *
+ * Get hashing type
+ * @arg link		Link object of type bond
+ * @arg mode		bond hashing type
+ *
+ * @return 0 on success or a negative error code
+ */
+int rtnl_link_bond_get_hashing_type(struct rtnl_link *link, uint8_t *type)
+{
+	struct bond_info *info = link->l_info;
+
+	IS_BOND_INFO_ASSERT(link);
+
+	if (!(info->ce_mask & BOND_HAS_HASHING_TYPE))
+		return -NLE_NOATTR;
+
+	if (type)
+		*type = info->hashing_type;
+
+	return 0;
 }
 
 /**
@@ -173,7 +374,7 @@ void rtnl_link_bond_set_miimon (struct rtnl_link *link, uint32_t miimon)
 
 	bn->miimon = miimon;
 
-	bn->bn_mask |= BOND_HAS_MIIMON;
+	bn->ce_mask |= BOND_HAS_MIIMON;
 }
 
 /**
@@ -192,7 +393,7 @@ void rtnl_link_bond_set_min_links (struct rtnl_link *link, uint32_t min_links)
 
 	bn->min_links = min_links;
 
-	bn->bn_mask |= BOND_HAS_MIN_LINKS;
+	bn->ce_mask |= BOND_HAS_MIN_LINKS;
 }
 
 /**
diff --git a/libnl-route-3.sym b/libnl-route-3.sym
index a97ff3f74475..c07bcc071613 100644
--- a/libnl-route-3.sym
+++ b/libnl-route-3.sym
@@ -1317,5 +1317,11 @@ global:
 
 libnl_3_10 {
 global:
+	rtnl_link_bond_get_activeslave;
+	rtnl_link_bond_get_mode;
+	rtnl_link_bond_get_primary;
+	rtnl_link_bond_get_xmit_hash_policy;
+	rtnl_link_bond_set_primary;
+	rtnl_link_bond_set_xmit_hash_policy;
 	rtnl_route_nh_identical;
 } libnl_3_9;
-- 
2.45.1

