From 9148e5dd3900034394885141a8b5d9658ef92dfd Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Tue, 6 Oct 2020 16:53:36 +0200
Subject: [PATCH 4/5] link/bonding: expose state on enslaved interfaces

Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 include/netlink/route/link/bonding.h |   3 +
 lib/route/link/bonding.c             | 180 +++++++++++++++++++++++++++
 libnl-route-3.sym                    |   2 +
 3 files changed, 185 insertions(+)

diff --git a/include/netlink/route/link/bonding.h b/include/netlink/route/link/bonding.h
index a68cf1e..1719e36 100644
--- a/include/netlink/route/link/bonding.h
+++ b/include/netlink/route/link/bonding.h
@@ -43,6 +43,9 @@ extern int	rtnl_link_bond_get_primary(struct rtnl_link *, uint32_t *);
 extern int	rtnl_link_bond_set_xmit_hash_policy(struct rtnl_link *, uint8_t);
 extern int	rtnl_link_bond_get_xmit_hash_policy(struct rtnl_link *, uint8_t *);
 
+extern int	rtnl_link_bond_slave_set_state(struct rtnl_link *, uint8_t);
+extern int	rtnl_link_bond_slave_get_state(struct rtnl_link *, uint8_t *);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/route/link/bonding.c b/lib/route/link/bonding.c
index 0774223..65d54af 100644
--- a/lib/route/link/bonding.c
+++ b/lib/route/link/bonding.c
@@ -172,6 +172,120 @@ static int bond_compare(struct rtnl_link *link_a, struct rtnl_link *link_b,
 	return diff;
 }
 
+/** @cond SKIP */
+#define BOND_SLAVE_ATTR_STATE		(1 << 0)
+
+struct bond_slave_info
+{
+	uint8_t  bsi_state;
+	uint32_t ce_mask;
+};
+
+/** @endcond */
+
+static struct nla_policy bond_slave_nl_policy[IFLA_BOND_SLAVE_MAX+1] = {
+	[IFLA_BOND_SLAVE_STATE] = { .type = NLA_U8 },
+};
+
+static int bond_slave_alloc(struct rtnl_link *link)
+{
+	struct bond_slave_info *info;
+
+	if (link->l_info_slave)
+		memset(link->l_info_slave, 0, sizeof(*info));
+	else {
+		if ((info = calloc(1, sizeof(*info))) == NULL)
+			return -NLE_NOMEM;
+
+		link->l_info_slave = info;
+	}
+	return 0;
+}
+
+static int bond_slave_parse(struct rtnl_link *link, struct nlattr *data,
+			    struct nlattr *xstats)
+{
+	struct nlattr *tb[IFLA_BOND_SLAVE_MAX+1];
+	struct bond_slave_info *info;
+	int err;
+
+	NL_DBG(3, "Parsing bonding info\n");
+
+	if ((err = nla_parse_nested(tb, IFLA_BOND_SLAVE_MAX, data, bond_slave_nl_policy)) < 0)
+		goto errout;
+
+	if ((err = bond_slave_alloc(link)) < 0)
+		goto errout;
+
+	info = link->l_info_slave;
+
+	if (tb[IFLA_BOND_SLAVE_STATE]) {
+		info->bsi_state = nla_get_u8(tb[IFLA_BOND_SLAVE_STATE]);
+		info->ce_mask |= BOND_SLAVE_ATTR_STATE;
+	}
+
+	err = 0;
+errout:
+	return err;
+}
+
+static void bond_slave_free(struct rtnl_link *link)
+{
+	free(link->l_info_slave);
+	link->l_info_slave = NULL;
+}
+
+static int bond_slave_clone(struct rtnl_link *dst, struct rtnl_link *src)
+{
+	struct bod_slave_info *vdst, *vsrc = src->l_info_slave;
+	int err;
+
+	dst->l_info_slave = NULL;
+	if ((err = bond_slave_alloc(dst)) < 0)
+		return err;
+	vdst = dst->l_info_slave;
+
+	if (!vdst || !vsrc)
+		return -NLE_NOMEM;
+
+	memcpy(vdst, vsrc, sizeof(struct bond_slave_info));
+
+	return 0;
+}
+
+static int bond_slave_put_attrs(struct nl_msg *msg, struct rtnl_link *link)
+{
+	struct bond_slave_info *info = link->l_info_slave;
+	struct nlattr *data;
+
+	if (!(data = nla_nest_start(msg, IFLA_INFO_SLAVE_DATA)))
+		return -NLE_MSGSIZE;
+
+	if (info->ce_mask & BOND_SLAVE_ATTR_STATE)
+		NLA_PUT_U8(msg, IFLA_BOND_SLAVE_STATE, info->bsi_state);
+
+	nla_nest_end(msg, data);
+
+nla_put_failure:
+	return 0;
+}
+
+static int bond_slave_compare(struct rtnl_link *link_a, struct rtnl_link *link_b,
+			 int flags)
+{
+	struct bond_slave_info *a = link_a->l_info_slave;
+	struct bond_slave_info *b = link_b->l_info_slave;
+	int diff = 0;
+	uint32_t attrs = flags & LOOSE_COMPARISON ? b->ce_mask : ~0;
+
+#define BOND_SLAVE_DIFF(ATTR, EXPR) ATTR_DIFF(attrs, BOND_SLAVE_ATTR_##ATTR, a, b, EXPR)
+
+	diff |= BOND_SLAVE_DIFF(STATE, a->bsi_state != b->bsi_state);
+#undef BONDSLAVE__DIFF
+
+	return diff;
+}
+
 /**
  * Allocate link object of type bond
  *
@@ -358,6 +472,14 @@ int rtnl_link_bond_release(struct nl_sock *sock, struct rtnl_link *slave)
 				rtnl_link_get_ifindex(slave));
 }
 
+static void bond_slave_dump_line(struct rtnl_link *link, struct nl_dump_params *p)
+{
+	struct bond_slave_info *info = link->l_info_slave;
+
+	if (info->ce_mask & BOND_SLAVE_ATTR_STATE)
+		nl_dump(p, "bond-slave-state %d", info->bsi_state);
+}
+
 static struct rtnl_link_info_ops bonding_info_ops = {
 	.io_name		= "bond",
 	.io_alloc		= bond_alloc,
@@ -366,6 +488,15 @@ static struct rtnl_link_info_ops bonding_info_ops = {
 	.io_put_attrs		= bond_put_attrs,
 	.io_free		= bond_free,
 	.io_compare		= bond_compare,
+	.io_slave_alloc		= bond_slave_alloc,
+	.io_slave_parse		= bond_slave_parse,
+	.io_slave_clone		= bond_slave_clone,
+	.io_slave_put_attrs	= bond_slave_put_attrs,
+	.io_slave_free		= bond_slave_free,
+	.io_slave_dump = {
+	    [NL_DUMP_LINE]	= bond_slave_dump_line,
+	},
+	.io_slave_compare	= bond_slave_compare,
 };
 
 /** @cond SKIP */
@@ -538,6 +669,55 @@ int rtnl_link_bond_get_xmit_hash_policy(struct rtnl_link *link, uint8_t *policy)
 	return 0;
 }
 
+/** @cond SKIP */
+#define IS_BOND_SLAVE_LINK_ASSERT(link) \
+	if ((link)->l_info_slave_ops != &bonding_info_ops) { \
+		APPBUG("Link is not a bonding slave. set slave type \"bond\" first."); \
+		return -NLE_OPNOTSUPP; \
+	}
+/** @endcond */
+
+/**
+ * Set bond slave state
+ * @arg link		Link object
+ * @arg state		slave state
+ *
+ * @return 0 on success or a negative error code.
+ */
+int rtnl_link_bond_slave_set_state(struct rtnl_link *link, uint8_t state)
+{
+	struct bond_slave_info *info = link->l_info_slave;
+
+	IS_BOND_SLAVE_LINK_ASSERT(link);
+
+	info->bsi_state = state;
+	info->ce_mask |= BOND_SLAVE_ATTR_STATE;
+
+	return 0;
+}
+
+/**
+ * Get bonding mode
+ * @arg link		Link object
+ * @arg mode		bond mode
+ *
+ * @return bond mode, 0 if not set or a negative error code.
+ */
+int rtnl_link_bond_slave_get_state(struct rtnl_link *link, uint8_t *state)
+{
+	struct bond_slave_info *info = link->l_info_slave;
+
+	IS_BOND_SLAVE_LINK_ASSERT(link);
+
+	if (!(info->ce_mask & BOND_SLAVE_ATTR_STATE))
+		return -NLE_NOATTR;
+
+	if (state)
+		*state = info->bsi_state;
+
+	return 0;
+}
+
 static void __init bonding_init(void)
 {
 	rtnl_link_register_info(&bonding_info_ops);
diff --git a/libnl-route-3.sym b/libnl-route-3.sym
index 37ad514..62b44ad 100644
--- a/libnl-route-3.sym
+++ b/libnl-route-3.sym
@@ -1160,6 +1160,8 @@ libnl_3_6 {
 	rtnl_link_bond_set_mode;
 	rtnl_link_bond_set_primary;
 	rtnl_link_bond_set_xmit_hash_policy;
+	rtnl_link_bond_slave_get_state;
+	rtnl_link_bond_slave_set_state;
 	rtnl_mdb_add_entry;
 	rtnl_mdb_alloc_cache_flags;
 	rtnl_mdb_foreach_entry;
-- 
2.32.0

