From dde4126e8ee58f5accb87f45bc53a07748d8cbe4 Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Tue, 6 Oct 2020 15:25:38 +0200
Subject: [PATCH 06/10] WIP: add info slave data support

Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 lib/route/link.c          | 71 +++++++++++++++++++++++++++++++++++++++
 lib/route/link/api.c      | 22 ++++++++++++
 lib/route/link/link-api.h | 36 ++++++++++++++++++++
 lib/route/nl-route.h      |  2 ++
 4 files changed, 131 insertions(+)

diff --git a/lib/route/link.c b/lib/route/link.c
index ce1355b991f2..d325deced80a 100644
--- a/lib/route/link.c
+++ b/lib/route/link.c
@@ -259,12 +259,29 @@ static void release_link_info(struct rtnl_link *link)
 	}
 }
 
+static void release_link_info_slave(struct rtnl_link *link)
+{
+	struct rtnl_link_info_ops *io = link->l_info_slave_ops;
+
+	if (io != NULL) {
+		if (io->io_slave_free)
+			io->io_slave_free(link);
+		else {
+			/* Catch missing io_free() implementations */
+			BUG_ON(link->l_info_slave);
+		}
+		rtnl_link_info_ops_put(io);
+		link->l_info_slave_ops = NULL;
+	}
+}
+
 static void link_free_data(struct nl_object *c)
 {
 	struct rtnl_link *link = nl_object_priv(c);
 
 	if (link) {
 		release_link_info(link);
+		release_link_info_slave(link);
 
 		/* proto info af reference */
 		rtnl_link_af_ops_put(link->l_af_ops);
@@ -337,6 +354,17 @@ static int link_clone(struct nl_object *_dst, struct nl_object *_src)
 		}
 	}
 
+	if (src->l_info_slave_ops) {
+		rtnl_link_info_ops_get(src->l_info_slave_ops);
+		dst->l_info_slave_ops = src->l_info_slave_ops;
+
+		if (src->l_info_slave_ops->io_slave_clone) {
+			err = src->l_info_slave_ops->io_slave_clone(dst, src);
+			if (err < 0)
+				return err;
+		}
+	}
+
 	if ((err = do_foreach_af(src, af_clone, dst)) < 0)
 		return err;
 
@@ -397,6 +425,8 @@ static struct nla_policy link_info_policy[IFLA_INFO_MAX+1] = {
 	[IFLA_INFO_KIND]	= { .type = NLA_STRING },
 	[IFLA_INFO_DATA]	= { .type = NLA_NESTED },
 	[IFLA_INFO_XSTATS]	= { .type = NLA_NESTED },
+	[IFLA_INFO_SLAVE_KIND]	= { .type = NLA_STRING },
+	[IFLA_INFO_SLAVE_DATA]	= { .type = NLA_NESTED },
 };
 
 int rtnl_link_info_parse(struct rtnl_link *link, struct nlattr **tb)
@@ -703,12 +733,27 @@ static int link_msg_parser(struct nl_cache_ops *ops, struct sockaddr_nl *who,
 		}
 
 		if (li[IFLA_INFO_SLAVE_KIND]) {
+			struct rtnl_link_info_ops *ops;
 			const char *kind = nla_get_string(li[IFLA_INFO_SLAVE_KIND]);
 
 			err = rtnl_link_set_slave_type(link, kind);
 			if (err < 0)
 				return err;
 
+			ops = link->l_info_slave_ops;
+
+			if (ops) {
+				if (ops->io_slave_parse &&
+				    (li[IFLA_INFO_SLAVE_DATA] || li[IFLA_INFO_XSTATS])) {
+					err = ops->io_slave_parse(link, li[IFLA_INFO_SLAVE_DATA],
+								  li[IFLA_INFO_XSTATS]);
+					if (err < 0)
+						return err;
+				} else {
+					/* XXX: Warn about unparsed info? */
+				}
+			}
+
 			link->ce_mask |= LINK_ATTR_LINKINFO_SLAVE_KIND;
 		}
 	}
@@ -898,6 +943,9 @@ static void link_dump_line(struct nl_object *obj, struct nl_dump_params *p)
 	if (link->l_info_ops && link->l_info_ops->io_dump[NL_DUMP_LINE])
 		link->l_info_ops->io_dump[NL_DUMP_LINE](link, p);
 
+	if (link->l_info_slave_ops && link->l_info_slave_ops->io_slave_dump[NL_DUMP_LINE])
+		link->l_info_slave_ops->io_slave_dump[NL_DUMP_LINE](link, p);
+
 	do_foreach_af(link, af_dump_line, p);
 
 	nl_dump(p, "\n");
@@ -1159,6 +1207,7 @@ static uint64_t link_compare(struct nl_object *_a, struct nl_object *_b,
 	}
 
 	diff |= _DIFF(LINK_ATTR_LINKINFO, rtnl_link_info_data_compare(a, b, flags) != 0);
+	diff |= _DIFF(LINK_ATTR_LINKINFO_SLAVE_KIND, rtnl_link_info_slave_data_compare(a, b, flags) != 0);
 out:
 	return diff;
 
@@ -1612,6 +1661,12 @@ static int build_link_msg(int cmd, struct ifinfomsg *hdr,
 
 		if (link->ce_mask & LINK_ATTR_LINKINFO_SLAVE_KIND) {
 			NLA_PUT_STRING(msg, IFLA_INFO_SLAVE_KIND, link->l_info_slave_kind);
+
+			if (link->l_info_slave_ops) {
+				if (link->l_info_slave_ops->io_put_attrs &&
+				    link->l_info_slave_ops->io_put_attrs(msg, link) < 0)
+					goto nla_put_failure;
+			}
 		}
 
 		nla_nest_end(msg, info);
@@ -2613,6 +2668,8 @@ char *rtnl_link_get_type(struct rtnl_link *link)
 int rtnl_link_set_slave_type(struct rtnl_link *link, const char *type)
 {
 	char *kind = NULL;
+	struct rtnl_link_info_ops *io;
+	int err;
 
 	if (type) {
 		kind = strdup(type);
@@ -2622,12 +2679,26 @@ int rtnl_link_set_slave_type(struct rtnl_link *link, const char *type)
 
 	free(link->l_info_slave_kind);
 	link->l_info_slave_kind = kind;
+	release_link_info_slave(link);
 
 	if (kind)
 		link->ce_mask |= LINK_ATTR_LINKINFO_SLAVE_KIND;
 	else
 		link->ce_mask &= ~LINK_ATTR_LINKINFO_SLAVE_KIND;
+
+	io = rtnl_link_info_ops_lookup(type);
+	if (io) {
+		if (   io->io_slave_alloc
+		    && (err = io->io_slave_alloc(link)) < 0)
+			goto errout;
+
+		link->l_info_slave_ops = io;
+	}
+
 	return 0;
+errout:
+	free(kind);
+	return err;
 }
 
 /**
diff --git a/lib/route/link/api.c b/lib/route/link/api.c
index abc9e6a75138..b4ae264bc837 100644
--- a/lib/route/link/api.c
+++ b/lib/route/link/api.c
@@ -433,6 +433,28 @@ int rtnl_link_info_data_compare(struct rtnl_link *a, struct rtnl_link *b, int fl
 	return a->l_info_ops->io_compare(a, b, flags);
 }
 
+/**
+ * Compare link info slave data
+ * @arg a              Link object a
+ * @arg b              Link object b
+ *
+ * This function will compare link_info slave data between two links
+ * a and b
+ *
+ * @return 0 if link_info data matches or is not present
+ * or != 0 if it mismatches.
+ */
+int rtnl_link_info_slave_data_compare(struct rtnl_link *a, struct rtnl_link *b, int flags)
+{
+	if (a->l_info_slave_ops != b->l_info_slave_ops)
+		return ~0;
+
+	if (!a->l_info_slave_ops || !a->l_info_slave_ops->io_slave_compare)
+		return 0;
+
+	return a->l_info_slave_ops->io_slave_compare(a, b, flags);
+}
+
 /** @} */
 
 /** @} */
diff --git a/lib/route/link/link-api.h b/lib/route/link/link-api.h
index 0e54057d2604..36b7bd5d0de1 100644
--- a/lib/route/link/link-api.h
+++ b/lib/route/link/link-api.h
@@ -57,6 +57,39 @@ struct rtnl_link_info_ops
 	int	      (*io_compare)(struct rtnl_link *, struct rtnl_link *,
 				    int flags);
 
+	/** Called to assign an info type to a link.
+	 * Has to allocate enough resources to hold attributes. Can
+	 * use link->l_info to store a pointer. */
+	int	      (*io_slave_alloc)(struct rtnl_link *);
+
+	/** Called to parse the link info attribute.
+	 * Must parse the attribute and assign all values to the link.
+	 */
+	int	      (*io_slave_parse)(struct rtnl_link *,
+				  struct nlattr *,
+				  struct nlattr *);
+
+	/** Called when the link object is dumped.
+	 * Must dump the info type specific attributes. */
+	void	      (*io_slave_dump[NL_DUMP_MAX+1])(struct rtnl_link *,
+						      struct nl_dump_params *);
+
+	/** Called when a link object is cloned.
+	 * Must clone all info type specific attributes. */
+	int	      (*io_slave_clone)(struct rtnl_link *, struct rtnl_link *);
+
+	/** Called when construction a slave link netlink message.
+	 * Must append all info type specific attributes to the message. */
+	int	      (*io_slave_put_attrs)(struct nl_msg *, struct rtnl_link *);
+
+	/** Called to release all resources previously allocated
+	 * in either io_slave_alloc() or io_slave_parse(). */
+	void	      (*io_slave_free)(struct rtnl_link *);
+
+	/** Called to compare slave link info parameters between two links. */
+	int	      (*io_slave_compare)(struct rtnl_link *, struct rtnl_link *,
+					  int flags);
+
 	struct nl_list_head		io_list;
 };
 
@@ -185,6 +218,9 @@ extern int			rtnl_link_af_data_compare(struct rtnl_link *a,
 extern int			rtnl_link_info_data_compare(struct rtnl_link *a,
 							    struct rtnl_link *b,
 							    int flags);
+extern int			rtnl_link_info_slave_data_compare(struct rtnl_link *a,
+							          struct rtnl_link *b,
+							          int flags);
 
 extern struct rtnl_link *link_lookup(struct nl_cache *cache, int ifindex);
 
diff --git a/lib/route/nl-route.h b/lib/route/nl-route.h
index 28d0166295e7..f559de40ace2 100644
--- a/lib/route/nl-route.h
+++ b/lib/route/nl-route.h
@@ -54,8 +54,10 @@ struct rtnl_link {
 	char *l_info_kind;
 	char *l_info_slave_kind;
 	struct rtnl_link_info_ops *l_info_ops;
+	struct rtnl_link_info_ops *l_info_slave_ops;
 	void *l_af_data[AF_MAX];
 	void *l_info;
+	void *l_info_slave;
 	char *l_ifalias;
 	uint32_t l_promiscuity;
 	uint32_t l_num_tx_queues;
-- 
2.45.0

